/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two 
 * terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed 
 * four million, find the sum of the even-valued terms.
 */


/*
 * SOLUTION: Use the formula: 
 * n_i+1 = n_i + n_i-1 
 * to figure out the next term of the fib. sequence. Use the mod operator to determine
 * if the number is even. I will use an int to store the sum since the sum is unlikely 
 * to exceed 2 trillion. 
 */
public class Prob_2 {
	//Starting point of the fib. sequence 
	final static int firstTerm = 1; 
	final static int secondTerm = 2; 
	
	public static void main(String[] args) {
		int termLimit = 25; 
		System.out.println("The sum of all the even fibonacci terms less than " +
				termLimit + " is: " + fibSequence(termLimit)); 
	}
	
	/*
	 * @param int limit			number of fib. terms you want to sum through
	 * @return 					sum of all even fib. terms from term 1 to numOfTerms
	 */
	public static int fibSequence (int limit){
		//We start on the 3rd term so we need to add 2 to make sure sum is correct
		int sum = secondTerm; 
		
		int nextTerm = 0; 					//n_i+1
		int currentTerm = secondTerm; 		//n_i
		int perviousTerm = firstTerm; 		//n_i-1
		while (currentTerm <= limit){
			nextTerm = currentTerm + perviousTerm; 
			
			if (nextTerm % 2 == 0)
				sum+= nextTerm; 
			
			//Just to be sure my assumption is correct! 
			if (sum < 0)
				System.out.println("Integer overflow!");
			
			perviousTerm = currentTerm; 
			currentTerm = nextTerm; 
		}
		return sum; 
	}
}
